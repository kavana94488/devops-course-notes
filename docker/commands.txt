1. docker images -- to list the images

2. docker ps   - list running container

  docker ps -a -> list running and stopped container

3. docker build -t <name>:<version> <path> -- to build image

4 docker run -d --name <containername> -p <hostPost>:<containerPort> <imageName:withVersion>  --> to run container

5. docker logs <containername> -- to check the logs 

6. docker exec -it <containername> bash --> to go inside the container and bash 

docker exec -- to go inside the container

7. docker status --> resource utilization of the container

8. docker start <containername/containerId> -> to start the container

9. To remove the image , first we have remove container . To remove container , first we have to stop the container

docker stop <containername/containerId>

docker rm <containername/containerId>

then , docker rmi <imageName>

-------------------------------

docker hub

1. docker login -> provide username & password

2. docker tag <imageName:version> <username>/<imageName:version>

3. docker push <username>/<imageName:version>

-----------------------------
to create private registry

1. docker -run -d --name <anyname> -p 5000:5000 registry:2

2. curl localhost:5000/v2/_catalog

3. docker tag <imagename>:<version> localhost:5000/<imagename>:<version>

4.docker push localhost:5000/<imagename>:<version>

5. curl localhost:5000/v2/_catalog

-----------------------------------

to create volume for public container

1. docker run -d --name <anyname:version> -v /opt:/etc/foo -p 8000:8080 kavana97/first:1.0

 for private 

1. docker -run -d --name <anyname> -p 5000:5000  -v /opt:/var/lib/registry/ registry:2

--------------------------

to create volume

1. docker volume create <volumeName>

2. docker volume ls --> to list the volume

3. to mount the container for common volume 
docker run -d --name <anyname:version> -v <volumeName>:/etc/foo -p 8000:8080 kavana97/first:1.0

that will be in /var/lib/docker/volumes


--------------------------------------

3 types of network

1 . bridge (default)
2.host
3 .null

 docker network ls --> list the network

docker network inspect bridge -> to inspect

docker network create <network name> -> to create network

docker network connect bridge <container name which wants to communcate>

----------------------------------------------------------------------------

docker secret 

reference ->  https://medium.com/@laura_67852/docker-secrets-an-introductory-guide-with-examples-d25be5fc8e50

1.Docker secrets are a secure way to manage sensitive data in your Docker environment, such as passwords, API keys, and other important information.

2.  it’s important to note that Docker secrets are a Swarm feature. Swarm is a native clustering and orchestration solution for Docker.

first we need to do 'docker swarm init'


echo "mypassword" | docker secret create my_secret -
This command will create a new secret called my_secret, containing the password “mypassword.” Notice the use of the — at the end of the command, which tells Docker to read the secret’s value from standard input instead of a file. Next, let’s create a simple service that makes use of this secret. We’ll use the official NGINX image, and our secret will be used as the basic authentication password:

$ docker service create --name nginx --secret my_secret nginx:latest
In this command, we create a new service called nginx, using the official NGINX image. We also attach our previously created secret (my_secret) to the service. Now, the secret is available to the NGINX container as a file located at /run/secrets/my_secret.


docker secret ls -> to list the secret
docker secret inspect <secret_name> -> this will give the json structure

to see the password , 

1.docker exec -it <container_name> bash 
2. cat /run/secret/<secret_name>